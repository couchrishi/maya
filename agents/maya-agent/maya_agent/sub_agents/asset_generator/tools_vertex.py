#!/usr/bin/env python3
"""
Vertex AI asset generation tools for Maya Game Creator Agent
Alternative to HuggingFace - uses deployed Vertex AI FLUX endpoint
"""

import os
import io
import json
import logging
import requests
from datetime import datetime
from typing import Dict
from google.genai import types
from google.adk.tools import ToolContext
from google.auth import default
from google.auth.transport.requests import Request

logger = logging.getLogger(__name__)

# Vertex AI Configuration
PROJECT_ID = "saib-ai-playground"
REGION = "us-central1"
ENDPOINT_ID = "4899814139997716480"  # From our deployment
ENDPOINT_URL = f"https://{REGION}-aiplatform.googleapis.com/v1/projects/{PROJECT_ID}/locations/{REGION}/endpoints/{ENDPOINT_ID}:predict"

# Asset settings (same as HF version)
ASSET_WIDTH = 512
ASSET_HEIGHT = 512
GRPZA_TRIGGER = "GRPZA"

def _get_vertex_ai_token():
    """Get Google Cloud access token for Vertex AI API calls."""
    try:
        credentials, project = default()
        credentials.refresh(Request())
        return credentials.token
    except Exception as e:
        logger.error(f"Failed to get Vertex AI credentials: {e}")
        return None

def _generate_vertex_asset(prompt: str) -> str:
    """Generate asset using Vertex AI FLUX endpoint."""
    try:
        # Get access token
        token = _get_vertex_ai_token()
        if not token:
            return "ERROR: Failed to authenticate with Vertex AI"
        
        # Prepare headers
        headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json"
        }
        
        # Prepare payload for FLUX model
        payload = {
            "instances": [{
                "prompt": prompt,
                "pixel_art": True,
                "height": ASSET_HEIGHT,
                "width": ASSET_WIDTH,
                "num_steps": 28,
                "guidance_scale": 3.5,
                "seed": 42
            }]
        }
        
        logger.info(f"Calling Vertex AI endpoint: {ENDPOINT_URL}")
        logger.info(f"Payload: {json.dumps(payload, indent=2)}")
        
        # Make the API call with timeout
        response = requests.post(
            ENDPOINT_URL,
            headers=headers,
            json=payload,
            timeout=60  # 60 second timeout
        )
        
        if response.status_code != 200:
            error_msg = f"Vertex AI API error {response.status_code}: {response.text}"
            logger.error(error_msg)
            return f"ERROR: {error_msg}"
        
        # Parse response
        result = response.json()
        logger.info(f"Vertex AI response keys: {result.keys()}")
        
        # Extract base64 image from response
        if "predictions" in result and len(result["predictions"]) > 0:
            prediction = result["predictions"][0]
            
            # Handle different possible response formats
            if "image" in prediction:
                base64_image = prediction["image"]
            elif "generated_image" in prediction:
                base64_image = prediction["generated_image"]
            elif isinstance(prediction, str):
                base64_image = prediction
            else:
                logger.error(f"Unexpected prediction format: {prediction}")
                return "ERROR: Unexpected response format from Vertex AI"
            
            logger.info(f"✅ Successfully generated asset via Vertex AI: {len(base64_image)} chars")
            return base64_image
        else:
            logger.error(f"No predictions in response: {result}")
            return "ERROR: No image generated by Vertex AI"
        
    except requests.exceptions.Timeout:
        logger.error("Vertex AI request timed out")
        return "ERROR: Vertex AI request timed out"
    except Exception as e:
        logger.error(f"Vertex AI generation failed: {str(e)}")
        return f"ERROR: Vertex AI generation failed - {str(e)}"

async def game_asset_generator_vertex_tool(description: str, tool_context: ToolContext) -> Dict[str, str]:
    """
    Generate exactly 3 strategic visual assets using Vertex AI FLUX endpoint and save as GCS Artifacts.
    
    Args:
        description (str): Description of the game for which to generate assets
        
    Returns:
        Dict[str, str]: Dictionary containing the 3 generated asset filenames:
            - primary_character: Filename of saved PNG artifact for main player character
            - interactive_object: Filename of saved PNG artifact for key interactive element  
            - environmental_element: Filename of saved PNG artifact for background/world element
    """
    print(f"🚀 Vertex AI Asset generation called for: {description}")
    
    try:
        asset_filenames = {}
        
        # Create local storage directory for debugging (optional)
        assets_dir = "/Users/saibalaji/Documents/maya/generated_assets"
        os.makedirs(assets_dir, exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        session_dir = os.path.join(assets_dir, f"vertex_session_{timestamp}")
        os.makedirs(session_dir, exist_ok=True)
        
        print(f"📁 Debug: Also saving assets to: {session_dir}")
        print(f"🌐 Primary storage: GCS maya-artifacts bucket via ADK")
        print(f"⚡ Using Vertex AI endpoint: {ENDPOINT_ID}")
        
        # Define the 3 strategic asset categories (same as HF version)
        asset_categories = {
            'primary_character': f'{GRPZA_TRIGGER}, main character for {description}, white background, game asset, pixel art',
            'interactive_object': f'{GRPZA_TRIGGER}, key interactive object for {description}, white background, game asset, pixel art', 
            'environmental_element': f'{GRPZA_TRIGGER}, environment element for {description}, white background, game asset, pixel art'
        }
        
        for category, prompt in asset_categories.items():
            try:
                logger.info(f"Generating {category} with Vertex AI: {prompt}")
                print(f"⚡ Generating {category} via Vertex AI...")
                
                # Generate image using Vertex AI
                base64_result = _generate_vertex_asset(prompt)
                
                if base64_result.startswith("ERROR:"):
                    logger.error(f"Vertex AI error for {category}: {base64_result}")
                    print(f"❌ Vertex AI error for {category}: {base64_result}")
                    continue
                
                # Convert base64 to PNG bytes
                import base64
                img_bytes = base64.b64decode(base64_result)
                
                # Create ADK artifact filename
                artifact_filename = f"vertex_{category}.png"
                
                # Create ADK Part from PNG bytes
                png_part = types.Part.from_bytes(
                    data=img_bytes,
                    mime_type="image/png"
                )
                
                # Save artifact using ADK context (async method)
                try:
                    version = await tool_context.save_artifact(filename=artifact_filename, artifact=png_part)
                    print(f"✅ Saved Vertex AI artifact '{artifact_filename}' to GCS maya-artifacts bucket as version {version}")
                    asset_filenames[category] = artifact_filename
                    
                    # Store in session state for Game Creator callback to access
                    # NOTE: tool_context.state doesn't exist in ADK - removing this line
                    # tool_context.state[f'temp:asset_{category}'] = artifact_filename
                    
                except Exception as save_error:
                    logger.error(f"Failed to save artifact {artifact_filename}: {save_error}")
                    print(f"❌ Failed to save artifact {artifact_filename}: {save_error}")
                    # Continue with local save as fallback
                    asset_filenames[category] = artifact_filename
                
                # Also save locally for debugging
                debug_filename = f"vertex_{category}_{description.replace(' ', '_')}.png"
                filepath = os.path.join(session_dir, debug_filename)
                
                with open(filepath, 'wb') as f:
                    f.write(img_bytes)
                
                print(f"✅ Generated {category} via Vertex AI: Local file {filepath} (artifact filename: {artifact_filename})")
                
            except Exception as e:
                logger.error(f"Failed to generate {category} via Vertex AI: {str(e)}")
                print(f"❌ Failed to generate {category} via Vertex AI: {str(e)}")
        
        # Save generation summary
        summary_path = os.path.join(session_dir, "vertex_generation_summary.txt")
        with open(summary_path, 'w') as f:
            f.write(f"Game Description: {description}\n")
            f.write(f"Generation Time: {timestamp}\n")
            f.write(f"Backend: Vertex AI FLUX Endpoint {ENDPOINT_ID}\n")
            f.write(f"Assets Generated: {len(asset_filenames)}/3\n\n")
            f.write("GCS ADK Artifacts Saved:\n")
            for category, filename in asset_filenames.items():
                f.write(f"- {category}: {filename} (stored in maya-artifacts bucket)\n")
        
        print(f"📝 Vertex AI generation summary saved to {summary_path}")
        print(f"🚀 Ready to pass {len(asset_filenames)} Vertex AI asset filenames to Game Creator")
        
        # Always mark generation as complete, even if some assets failed
        if len(asset_filenames) > 0:
            print(f"✅ Vertex AI asset generation completed with {len(asset_filenames)}/3 assets")
            # NOTE: tool_context.state doesn't exist in ADK - removing state access
            # tool_context.state['temp:asset_filenames'] = asset_filenames
            # tool_context.state['temp:asset_generation_complete'] = True
        else:
            print("⚠️ No Vertex AI assets generated, falling back to text-only mode")
            # tool_context.state['temp:asset_generation_complete'] = False
        
        return asset_filenames
        
    except Exception as e:
        error_msg = f"Vertex AI asset generation failed: {str(e)}"
        logger.exception(error_msg)
        print(f"❌ {error_msg}")
        return {"error": error_msg}